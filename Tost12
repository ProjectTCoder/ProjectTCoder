local engine = loadstring(game:HttpGet("https://raw.githubusercontent.com/Singularity5490/rbimgui-2/main/rbimgui-2.lua"))()

local window1 = engine.new({
    text = "Project_T",
    size = Vector2.new(400,600),
})

window1.open()
----------------------------------------------------------------------------------------------------------------------------------|: Library End

Players = game:GetService("Players")
local Wrk = game:GetService("Workspace")
local L_Player = Players.LocalPlayer
local Camera = Wrk.CurrentCamera
local WorldToViewportPoint = Camera.WorldToViewportPoint
local CameraX = Camera.ViewportSize.X

if not L_Player or L_Player.Name or L_Player == nil  then
	repeat
		wait(1)
		L_Player = Players.LocalPlayer
	until L_Player ~= nil or L_Player.Name
end


local WhiteList_={string}
WhiteList_[L_Player.Name] = true

local HeadOff = Vector3.new(0,1.5,0)
local Legoff = Vector3.new(0,4,0)

local Settings={}
Settings.Esp = false
Settings.Calculing_Distance = 1500
Settings.Speed_Calculing = 0
Settings.Alert_Distance = 150
Settings.Aler_Color = Color3.new(1, 0, 0)
Settings.Team_Checke = false

local Add_Visual={}
Add_Visual.Distance = false
Add_Visual.Name = false
Add_Visual.Health = false
Add_Visual.Box = false
Add_Visual.Liner = false
Add_Visual.Circle = false
Add_Visual.RayCast = false

local Name_Settings={}
Name_Settings.Color = Color3.new(1, 1, 1)
Name_Settings.Size = 14
Name_Settings.OffestX = 0
Name_Settings.OffestY = -70

local Health_Settings={}
Health_Settings.Color_Under_100 = Color3.new(0, 1, 0.0823529)
Health_Settings.Color_Under_70 = Color3.new(0.984314, 1, 0)
Health_Settings.Color_Under_40 = Color3.new(1, 0, 0.0156863)
Health_Settings.Size = 14
Health_Settings.OffestX = -60
Health_Settings.OffestY = -70

local Box_Settings={}
Box_Settings.Color = Color3.new(1, 1, 1)
Box_Settings.Size = 50

local Liner_Settings={}
Liner_Settings.Color = Color3.new(1, 1, 1)
Liner_Settings.Aler_Color = false
Liner_Settings.OffestX = 2
Liner_Settings.OffestY = 100

local Circle_Settings={}
Circle_Settings.RayCast = false
Circle_Settings.Color = Color3.new(1, 1, 1)
Circle_Settings.RayCastColor = Color3.new(0.0156863, 1, 0)
Circle_Settings.Minimum_Size = 3
Circle_Settings.Maximum_Size = 10


local Connections_Global={}

function Create_Esp_Name()
	local Esp_Name_Visual = Drawing.new("Text")
	Esp_Name_Visual.Center = true
	Esp_Name_Visual.Font = 2
	Esp_Name_Visual.Outline = true
	Esp_Name_Visual.Size = 13
	Esp_Name_Visual.Visible = false
	return Esp_Name_Visual
end

function Create_Health()
	local Esp_Health_Visual = Drawing.new("Text")
	Esp_Health_Visual.Center = true
	Esp_Health_Visual.Font = 2
	Esp_Health_Visual.Outline = true
	Esp_Health_Visual.OutlineColor = Health_Settings.Color_Under_100
	Esp_Health_Visual.Size = 13
	Esp_Health_Visual.Visible = false
	return Esp_Health_Visual
end

function Create_Esp_Box()
	local Esp_Box_Visual = Drawing.new("Square")
	Esp_Box_Visual.Transparency = 1
	Esp_Box_Visual.Thickness = 1
	Esp_Box_Visual.Filled = false
	Esp_Box_Visual.Visible = false
	Esp_Box_Visual.Color = Color3.fromRGB(255, 0, 255)
	return Esp_Box_Visual
end

function Create_Esp_Liner()
	local Esp_Liner_Visual = Drawing.new("Line")
	Esp_Liner_Visual.Transparency = 1
	Esp_Liner_Visual.Thickness = 1
	Esp_Liner_Visual.Visible = false
	return Esp_Liner_Visual
end

function Create_Esp_Circle()
	local Esp_Circle_Visual = Drawing.new("Circle")
	Esp_Circle_Visual.Transparency = 1
	Esp_Circle_Visual.Thickness = 2
	Esp_Circle_Visual.NumSides = 64
	Esp_Circle_Visual.Filled = false
	Esp_Circle_Visual.Color = Color3.new(1, 1, 1)
	return Esp_Circle_Visual
end

local LocalCharacter = L_Player.Character or L_Player.CharacterAdded:Wait()

function Fin_Humanoid(Character: Model): Humanoid | nil
	local Humanoid = Character:FindFirstChild("Humanoid")
	local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")
	local Attempts = 0
	while not Humanoid or not HumanoidRootPart and Attempts < 10 do
		task.wait(0.8)
		Humanoid = Character:FindFirstChild("Humanoid")
		HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")
		Attempts += 1
	end
	if Attempts >= 15 then return nil end
	return Humanoid , HumanoidRootPart
end

function Return_Humanoid_and_RootPart(player: Player, Character: Model)
	if not player or not player:IsA("Player") then
		return nil, nil, nil -- Si le player n'est pas valide, retourne nil
	end
	local Head
	local character 
	local humanoid , humanoidRootPart
	local attempts = 0
	local maxAttempts = 200
	if Character and Players:GetPlayerFromCharacter(Character) then
		character = Character
	else
		character = player.Character or player.CharacterAdded:Wait()
	end

	while attempts < maxAttempts do
		if not character then
			character = player.Character
		end

		if character then
			if not humanoid then
				humanoid = character:FindFirstChildOfClass("Humanoid")
			end
			if not humanoidRootPart then
				humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
			end
			if not Head then
				Head = character:FindFirstChild("Head")
			end
		end
		if character and humanoid and humanoidRootPart and Head then
			break
		end

		task.wait(1)
		attempts += 1
	end

	if character == nil or humanoid == nil or humanoidRootPart == nil or Head == nil then
		--print("[character]: ",Character,"| [humanoid]: ",humanoid,"| [humanoidRootPart]: ",humanoidRootPart,"| [Head]: ",Head )
	end

	return character, humanoid, humanoidRootPart , Head
end

function Check_Esp_Status(Player : Player , Humanoid : Humanoid , Connections : RBXScriptConnection , RootPart , Head)
	--print("Player:", Player, "Humanoid:", Humanoid, "RootPart:", RootPart, "Head:", Head)
	if Player == nil or Humanoid == nil or RootPart == nil or Head == nil then
		Break_Connections(Connections)
		--print("[188]: [Player]: ",Player,"| [Humanoid]: ",Humanoid," | [RootPart]: ",RootPart," | [Head]: ",Head," | [Status]: ",Settings.Esp)
		return false
	end 
	return true
end

function Return_Distance_Max(Hrp_Pose : Vector3)
	local Calcule_Distance = (Camera.CFrame.Position - Hrp_Pose).Magnitude
	if Calcule_Distance <= Settings.Calculing_Distance  then
		return true , math.floor(Calcule_Distance)
	end
	return false
end

function Tourn_(instance,Objectif,Destroy)
	local function Safe_Delet(Object)
		local success, err = pcall(function()
			return Object:Remove()
		end)
	end
	if instance.Visible == not Objectif and not Destroy then
		instance.Visible = Objectif
	elseif Destroy then
		Safe_Delet(instance)
	end
end

function Break_Connections(Connections : SharedTable , Visual : SharedTable)
	for _, connection in pairs(Connections) do task.wait()
		if connection then
			connection:Disconnect()
			connection = nil
		end
	end
	if Visual ~= nil then
		for _,v in Visual do task.wait()
			Tourn_(v,false,true)
		end
	end

end

function Target_Visible(Camera_Pose , target)

	local function isPartOfPlayer(part,Cibling)
		if not part then return false end
		local parent = part.Parent
		local Atteps = 0
		while parent do task.wait()
			if parent:FindFirstChildOfClass("Humanoid") then
				local player = Players:GetPlayerFromCharacter(parent)
				if player and parent.Name == Cibling then
					return true, player  
				end
			end
			parent = parent.Parent 
			Atteps+=1
			if Atteps>=10 then
				return false
			end
		end
		return false  
	end

	local Distance = (target.Position - Camera_Pose).Magnitude + 10
	local ray = Ray.new(Camera_Pose,(target.Position-Camera_Pose).Unit * Distance )
	local part, position = Wrk:FindPartOnRayWithIgnoreList(ray, {LocalCharacter or L_Player.Character or L_Player.CharacterAdded:Wait() or nil}, false, true)
	if part and target.Parent and target.Parent.Name ~= nil then
		local Resultat = isPartOfPlayer(part,target.Parent.Name)
		if Resultat  then
			return true
		else
			return false
		end
	end
	return false
end



function Name_and_Distance_System(Player : Player , Visual : SharedTable , Position_On_Screen_Hrp : Vector2,Calculed_Distance : number) --|: Name / Distance
	if Add_Visual.Name and Add_Visual.Distance then
		Visual.Name.Text = Player.Name.."  [ "..Calculed_Distance.." ]"
	elseif Add_Visual.Name and not Add_Visual.Distance then
		Visual.Name.Text = Player.Name
	elseif Add_Visual.Distance and not Add_Visual.Name then
		Visual.Name.Text = "[ "..Calculed_Distance.." ]"
	end
	Visual.Name.Position = Vector2.new((Position_On_Screen_Hrp.X+Name_Settings.OffestX),(Position_On_Screen_Hrp.Y+Name_Settings.OffestY))
	Visual.Name.Size = Name_Settings.Size
	if Calculed_Distance <= Settings.Alert_Distance then
		Visual.Name.Color = Settings.Aler_Color
	else
		Visual.Name.Color = Name_Settings.Color
	end
	Tourn_(Visual.Name,true)
end

function Health_System(Visual : SharedTable , Position_On_Screen_Hrp : Vector2) --|: Health
	Visual.Health.Position = Vector2.new((Position_On_Screen_Hrp.X+Health_Settings.OffestX),(Position_On_Screen_Hrp.Y+Health_Settings.OffestY))
	Visual.Health.Size = Health_Settings.Size
	Tourn_(Visual.Health,true)
end

function Box_System(Visual : SharedTable, Position_On_Screen_Hrp : Vector2, Hrp_Pose : Vector3) --|: Box
	local Position_On_Screen2 : Vector2 , Valide_On_Screen : boolean = Camera:WorldToViewportPoint(Hrp_Pose - Legoff)
	local Position_On_Screen3 : Vector2 , Valide_On_Screen : boolean = Camera:WorldToViewportPoint(Hrp_Pose + HeadOff)
	Visual.Box.Size = Vector2.new(1000/Position_On_Screen_Hrp.Z,Position_On_Screen3.Y - Position_On_Screen2.Y)
	Visual.Box.Position = Vector2.new(Position_On_Screen_Hrp.X - Visual.Box.Size.X/2,Position_On_Screen_Hrp.Y-Visual.Box.Size.Y/2)
	Visual.Box.Color = Box_Settings.Color
	Tourn_(Visual.Box,true)
end

function Liner_Function(Visual : SharedTable,Position_On_Screen_Hrp : Vector2, Calculed_Distance : number)
	local Camera_X = Camera.ViewportSize.X
	local Camera_Y = Camera.ViewportSize.Y
	Visual.Liner.From = Vector2.new(Camera_X/Liner_Settings.OffestX,Camera_Y/Liner_Settings.OffestY)
	Visual.Liner.To = Vector2.new(Position_On_Screen_Hrp.X,Position_On_Screen_Hrp.Y)
	if Calculed_Distance <= Settings.Alert_Distance then
		Visual.Liner.Color = Settings.Aler_Color
	else
		Visual.Liner.Color = Liner_Settings.Color
	end
	Tourn_(Visual.Liner,true)
end

function Circle_System(Visual : SharedTable,Position_On_Screen_Hrp : Vector2,Hrp_Pose : Vector3,Head : Part)
	if not Head then return end
	local Head_Pose = Head.Position
	local CameraPose = Camera.CFrame.Position
	local Position_On_Screen3 : Vector2 , Valide_On_Screen : boolean = Camera:WorldToViewportPoint(Head_Pose)

	local HeadSize = Head.Size.Y / 2
	local Distance = (CameraPose - Head_Pose).Magnitude
	local ScreenRadius = (HeadSize / Distance) * CameraX
	ScreenRadius = math.clamp(ScreenRadius, Circle_Settings.Minimum_Size, Circle_Settings.Maximum_Size)

	Visual.Circle.Position = Vector2.new(Position_On_Screen3.X,Position_On_Screen3.Y)
	Visual.Circle.Radius = ScreenRadius

	if Circle_Settings.RayCast  then
		if Target_Visible(CameraPose,Head) then
			Visual.Circle.Color = Circle_Settings.RayCastColor
		else
			Visual.Circle.Color = Circle_Settings.Color
		end
	else
		Visual.Circle.Color = Circle_Settings.Color
	end

	Tourn_(Visual.Circle,true)
end

function TournOff_Visuals(Visual : SharedTable)
	for _,v in Visual do task.wait()
		Tourn_(v,false)
	end
end

------------------------------------------------------------------|: Esp System
function Esp(Player : Player , HumanoidRootPart : Part , Humanoid : Humanoid , Connections : SharedTable , Visual : SharedTable , Head : Part)
	local Valide = Check_Esp_Status(Player,Humanoid,Connections,HumanoidRootPart,Head)
	if not Valide then return  end --print("Error 148  :"..Player.Name)
	local Hrp_Pose = HumanoidRootPart.Position
	local Valide_Distance , Calculed_Distance = Return_Distance_Max(Hrp_Pose)

	if not Valide_Distance then TournOff_Visuals(Visual) return end

	local Position_On_Screen_Hrp : Vector2 , Valide_On_Screen : boolean = Camera:WorldToViewportPoint(Hrp_Pose)

	if Valide_On_Screen and Valide_Distance then

		if Add_Visual.Name or Add_Visual.Distance then --|: Name and Distance
			Name_and_Distance_System(Player,Visual,Position_On_Screen_Hrp,Calculed_Distance)
		else
			Tourn_(Visual.Name,false)
		end

		if Add_Visual.Health then --|: Health
			Health_System(Visual,Position_On_Screen_Hrp)
		else
			Tourn_(Visual.Health,false)
		end

		if Add_Visual.Box then --|: Box
			Box_System(Visual,Position_On_Screen_Hrp,Hrp_Pose)
		else
			Tourn_(Visual.Box,false)
		end

		if Add_Visual.Liner then
			Liner_Function(Visual,Position_On_Screen_Hrp,Calculed_Distance)
		else
			Tourn_(Visual.Liner,false)
		end

		if Add_Visual.Circle then
			Circle_System(Visual,Position_On_Screen_Hrp,Hrp_Pose,Head)
		else
			Tourn_(Visual.Circle,false)
		end

	else
		TournOff_Visuals(Visual)
	end

end

function Get_Pourcent(Actual_Value,Max_Value)
	return math.floor((Actual_Value / Max_Value) * 100)
end

function Player_Moving(Player : Player ,Humanoid : Humanoid , Connections : SharedTable , HumanoidRootPart : Part , Visual : SharedTable , Character : Model , Head : Part)
	local Connection_Runnig = nil
	local Connection_Air = nil
	local Camera_Connection_Active = false
	local DoubleCheck = true

	Connections.MoveDirection = Humanoid:GetPropertyChangedSignal("MoveDirection"):Connect(function()
		if Humanoid.MoveDirection ~= Vector3.new(0,0,0) and Settings.Esp and not (Connection_Runnig or Camera_Connection_Active) then
			Connection_Runnig = true
			DoubleCheck = true
			task.spawn(function()
				while Humanoid.MoveDirection ~= Vector3.new(0,0,0) and Settings.Esp and Humanoid and HumanoidRootPart do
					Esp(Player,HumanoidRootPart,Humanoid,Connections,Visual,Head)
					task.wait(Settings.Speed_Calculing)
				end
				DoubleCheck = false
				task.spawn(function() -------|: fix correct Esp Pose afer Character Stop
					for i = 1,250 do if Player and Humanoid and Settings.Esp and HumanoidRootPart then
							if DoubleCheck then break end
							Esp(Player,HumanoidRootPart,Humanoid,Connections,Visual,Head)
							task.wait(0.05)
						end
					end
				end)
				task.wait(1)
				Connection_Runnig = false
			end)
		elseif not Settings.Esp then
			Break_Connections(Connections,Visual)
		end
	end)
	local Air_ = nil

	Connections.Humanoid_Died = Humanoid.Died:Connect(function()
		Break_Connections(Connections,Visual)
	end)

	Visual.Health.Text = "[ "..math.floor(Humanoid.Health).." ]"
	local MaxHealth = Humanoid.MaxHealth
	Connections.Humanoid_Health = Humanoid.HealthChanged:Connect(function(New_Health)
		if Settings.Esp and Visual.Health.Visible ~= nil then
			local Calculed_Health = Get_Pourcent(New_Health,MaxHealth)
			Visual.Health.Text = "[ "..math.floor(New_Health).." ]"
			if Calculed_Health >= 70 then
				Visual.Health.Color = Health_Settings.Color_Under_100
			elseif Calculed_Health >= 40 then
				Visual.Health.Color = Health_Settings.Color_Under_70
			else
				Visual.Health.Color = Health_Settings.Color_Under_40
			end
		elseif not Settings.Esp then
			Break_Connections(Connections,Visual)
		end

	end)


	Connections.FloorMaterial = Humanoid:GetPropertyChangedSignal("FloorMaterial"):Connect(function()
		if not Settings.Esp then Break_Connections(Connections,Visual) return end
		if Settings.Esp and Humanoid.FloorMaterial == Enum.Material.Air then Air_ = true else Air_ = false end
		if (Connection_Runnig or Connection_Air or Camera_Connection_Active) or not Humanoid or Humanoid.FloorMaterial ~= Enum.Material.Air then return end
		Connection_Air = true
		task.spawn(function()
			while not Connection_Runnig and Settings.Esp and Humanoid and Air_ and HumanoidRootPart do
				Esp(Player,HumanoidRootPart,Humanoid,Connections,Visual,Head)
				task.wait(Settings.Speed_Calculing)
			end
			Connection_Air = false
		end)
	end)

	Connections.Camera = Camera:GetPropertyChangedSignal("CoordinateFrame"):Connect(function()
		if Settings.Esp and Player and Humanoid and HumanoidRootPart then
			Camera_Connection_Active = true
			Esp(Player,HumanoidRootPart,Humanoid,Connections,Visual,Head)
		elseif not Settings.Esp  then
			Break_Connections(Connections,Visual)
		end
		task.wait(0.1)
		Camera_Connection_Active = false
	end)
	Character.AncestryChanged:Connect(function(_,NewParent_)
		if not NewParent_  then
			task.wait(0.1)
			Break_Connections(Connections,Visual)
		end
	end)

	Esp(Player,HumanoidRootPart,Humanoid,Connections,Visual,Head)

end

function General(Player: Player, Character: Model)
	local character, humanoid, humanoidRootPart , Head = Return_Humanoid_and_RootPart(Player, Character)
	--print("[496]  Character:  ",character,"| Humanoid:  ",humanoid,"| humanoidRootPart: ",humanoidRootPart,"| Head: ",Head )
	if humanoid == nil or humanoidRootPart == nil or character == nil or Head == nil or Player == nil then 
		--print("[495]:  [Player]: ",Player,"| [Humanoid]: ",humanoid," | [humanoidRootPart]: ",humanoidRootPart," | [Head]: ",Head," | [Status]: ",Settings.Esp)
		return  end

	local Connections={}

	local function CreateVisuals()
		return {
			Name = Create_Esp_Name(),
			Health = Create_Health(),
			Box = Create_Esp_Box(),
			Liner = Create_Esp_Liner(),
			Circle = Create_Esp_Circle(),
		}
	end
	local Visual = CreateVisuals()
	local Valide = Check_Esp_Status(Player,humanoid,Connections,humanoidRootPart,Head)
	if not Valide then  return end --print("221 : ".. Player.Name)
	--print("Check:511: Passed")
	Player_Moving(Player,humanoid,Connections,humanoidRootPart,Visual,character,Head)

end

function Insert_in_Black_List_Ray(Character: Model)
	LocalCharacter = Character
end


function CharacterCreated(Player : Player)
	if not WhiteList_[Player.Name] then
		Player.CharacterAdded:Connect(function(New_Char) if Settings.Esp then task.delay(.1,function() General(Player,New_Char) end) end end)
	end

end

task.spawn(function()
	while not L_Player.Character do
		task.wait(1)
	end
	Insert_in_Black_List_Ray(L_Player.Character or L_Player.CharacterAdded:Wait())
end)

L_Player.CharacterAdded:Connect(Insert_in_Black_List_Ray)


function Team_Checker_Valider()
	for Index , Player_ in Players:GetPlayers() do
		if Player_.Team ~= nil and not WhiteList_[Player_.Name]  then
			if Player_.Team == L_Player.Team or Player_.TeamColor == L_Player.TeamColor then
				WhiteList_[Player_.Name] = true
			end
		end
	end
end

function Enable_Esp(Bolean)
	if Bolean then
		Settings.Esp = true

		if Settings.Team_Checke then Team_Checker_Valider() end

		for Index , Player_ in Players:GetPlayers() do
			if not WhiteList_[Player_.Name] then
				CharacterCreated(Player_)
				task.delay(.1,function()
					General(Player_,Player_.Character or Player_.CharacterAdded:Wait())
				end)
				task.wait()
			end
		end

		Connections_Global.PlayerJoined = Players.PlayerAdded:Connect(CharacterCreated)

	elseif not Bolean then
		Settings.Esp = false
		for _, connection in pairs(Connections_Global) do task.wait()
			if connection and connection ~= nil then
				connection:Disconnect()
				connection = nil 
			end
		end
	end
end
----------------------------------------------------------------------------------------------------------------------------------|: Library Start

local Visuals = window1.new({  --|: window1 > Classe Visual
    text = "Visuals",
})

local Settings_Windouws = window1.new({ --|: window1 > Classe Settings
    text = "Settings",
})
local dock0 = Visuals.new("dock")

local Enable_Esp_Button = dock0.new("switch", {  --|: Visual > Esp > dock0 > (Button True/False)
    text = "Esp";
})
Enable_Esp_Button.set(false)
Enable_Esp_Button.event:Connect(function(bool)
    Enable_Esp(bool)
end)

local Aler_Color = dock0.new("color", {  --|: Visual > dock0 > Color Alert
    color = Settings.Aler_Color,
    text = "Alert_Color",
})
Aler_Color.event:Connect(function(color_)
    Settings.Aler_Color = color_
end)

local Calculing___ = dock0.new("slider", { --|: Visual > Offest.Y (Health Offest )
    text = "Y",
    color = Color3.new(0.160784, 0.290196, 0.478431),
    min = 100,
    max = 5000,
    value = Calculing_Distance,
    rounding = 1,
})
Calculing___.event:Connect(function(x)
    Settings.Calculing_Distance = x
end)
Calculing___.set(Settings.Calculing_Distance)



local label1 = Visuals.new("label", { --|: Visual > Text-Label 
    text = "Name/Stubs",
    color = Color3.new(31,225,255),
	TextXAlignment = Enum.TextXAlignment.Center
})

local dock1 = Visuals.new("dock")  --|: Visual > Dock1 (Pour Affiche Plusieur instance dans la meme ligne)
local dock2 = Visuals.new("dock")

local Add_Name = dock1.new("switch", { --|: Visual > Dock1 > Add_Name (Button True/False)
    text = "Name";
})
Add_Name.set(false)
Add_Name.event:Connect(function(bool)
    Add_Visual.Name = bool
end)

local Add_Stubs = dock1.new("switch", { --|: Visual > Dock1 > Add_Stubs (Button True/False)
    text = "Stubs";
})
Add_Stubs.set(false)
Add_Stubs.event:Connect(function(bool)
    Add_Visual.Distance = bool
end)

local slider_Offest_X = dock2.new("slider", { --|: Visual > Slider (for Name/Stubs  Offest.X )
    text = "X",
    color = Color3.new(0.160784, 0.290196, 0.478431),
    min = -150,
    max = 150,
    value = Name_Settings.OffestX,
    rounding = 0.5,
})
slider_Offest_X.event:Connect(function(x)
    Name_Settings.OffestX = x
end)
slider_Offest_X.set(Name_Settings.OffestX)

local slider_Offest_Y = dock2.new("slider", { --|: Visual > Slider (for Name/Stubs  Offest.Y )
    text = "Y",
    color = Color3.new(0.160784, 0.290196, 0.478431),
    min = -150,
    max = 150,
    value = Name_Settings.OffestY,
    rounding = 0.5,
})
slider_Offest_Y.event:Connect(function(x)
    Name_Settings.OffestY = x
end)

local slider_Size = Visuals.new("slider", { --|: Visual > Size (for Name/Stubs  Size )
    text = "Size",
    color = Color3.new(0.160784, 0.290196, 0.478431),
    min = 1,
    max = 50,
    value = Name_Settings.Size,
    rounding = 1,
})
slider_Size.event:Connect(function(x)
    Name_Settings.Size = x
end)
slider_Size.set(Name_Settings.Size)



slider_Offest_Y.set(Name_Settings.OffestY)

local color1 = dock1.new("color", {  --|: Visual > Color (for Name/Stubs Color-Pick )
    color = Name_Settings.Color,
    text = "Color",
})
color1.event:Connect(function(color)
    Name_Settings.Color = color
end)

----------------------------------|: Box_Liner_Section

local label2 = Visuals.new("label", { --|: Visual > Text-Label 
    text = "Box/Liner",
    color = Color3.new(31,225,255),
	TextXAlignment = Enum.TextXAlignment.Center
})

local dock3 = Visuals.new("dock")
local dockColor = Visuals.new("dock")

local Add_Box = dock3.new("switch", { --|: Visual > Dock3 > Box (Button True/False)
    text = "Box";
})
Add_Box.set(false)
Add_Box.event:Connect(function(bool)
    Add_Visual.Box = bool
end)
local Add_Liner = dock3.new("switch", { --|: Visual > Dock3 > Box (Button True/False)
    text = "Liner";
})
Add_Liner.set(false)
Add_Liner.event:Connect(function(bool)
    Add_Visual.Liner = bool
end)

local colorBox = dockColor.new("color", {  --|: Visual > Color (for Box/Liner Color-Pick )
    color = Box_Settings.Color,
    text = "Box",
}) 
colorBox.event:Connect(function(color)
    Box_Settings.Color = color
end)
local colorLiner = dockColor.new("color", {  --|: Visual > Color (for Box/Liner Color-Pick )
    color = Liner_Settings.Color,
    text = "Liner",
}) 
colorLiner.event:Connect(function(color)
    Liner_Settings.Color = color
end)

local dropdown1 = dock3.new("dropdown", {
    text = "Liner_Position",
})
dropdown1.new("Top")
dropdown1.new("Middle")
dropdown1.new("Bottom")
dropdown1.event:Connect(function(name)
	if name == "Top" then
		Liner_Settings.OffestY = 200
		elseif name == "Middle" then
			Liner_Settings.OffestY = 2
			elseif name == "Bottom" then
				Liner_Settings.OffestY = 1
	end
end)

----------------------------------|: Health_Section
local label2 = Visuals.new("label", { --|: Visual > Text-Label 
    text = "Health",
    color = Color3.new(31,225,255),
	TextXAlignment = Enum.TextXAlignment.Center
})
local dock4 = Visuals.new("dock")

local Add_Health = dock4.new("switch", { --|: Visual > Dock3 > Box (Button True/False)
    text = "Health";
})
Add_Health.set(false)
Add_Health.event:Connect(function(bool)
    Add_Visual.Health = bool
end)

local slider_Size = Visuals.new("slider", { --|: Visual > Size (for Name/Stubs  Size )
    text = "Size",
    color = Color3.new(0.160784, 0.290196, 0.478431),
    min = 1,
    max = 50,
    value = Health_Settings.Size,
    rounding = 1,
})
slider_Size.event:Connect(function(x)
    Health_Settings.Size = x
end)
slider_Size.set(Health_Settings.Size)

local dock4Offest = Visuals.new("dock")

local HealthX = dock4Offest.new("slider", { --|: Visual > Offest.X (Health Offest )
    text = "X",
    color = Color3.new(0.160784, 0.290196, 0.478431),
    min = -100,
    max = 100,
    value = Health_Settings.OffestX,
    rounding = 1,
})
slider_Size.event:Connect(function(x)
    Health_Settings.OffestX = x
end)
slider_Size.set(Health_Settings.OffestX)

local HealthY = dock4Offest.new("slider", { --|: Visual > Offest.Y (Health Offest )
    text = "Y",
    color = Color3.new(0.160784, 0.290196, 0.478431),
    min = -100,
    max = 100,
    value = Health_Settings.OffestY,
    rounding = 1,
})
slider_Size.event:Connect(function(x)
    Health_Settings.OffestY = x
end)
slider_Size.set(Health_Settings.OffestY)

----------------------------------|: Circle_Section

local Circle_Label = Visuals.new("label", { --|: Visual > Text-Label 
    text = "Cirlce",
    color = Color3.new(31,225,255),
	TextXAlignment = Enum.TextXAlignment.Center
})

local dock5 = Visuals.new("dock")

local Add_Circle = dock5.new("switch", { --|: Visual > Dock5 > Circle (Button True/False)
    text = "Circle";
})
Add_Circle.set(false)
Add_Circle.event:Connect(function(bool)
    Add_Visual.Circle = bool
end)

local Add_RayCast = dock5.new("switch", { --|: Visual > Dock5 > RayCast (Button True/False)
    text = "RayCast";
})
Add_RayCast.set(false)
Add_RayCast.event:Connect(function(bool)
    Circle_Settings.RayCast = bool
end)
